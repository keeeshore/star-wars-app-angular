{"version":3,"sources":["./src/app/film/film.component.ts","./src/app/film/film.component.html","./src/environments/environment.ts","./src/app/services/http.service.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/person/person.component.html","./src/app/person/person.component.ts","./src/app/services/people.service.ts","./src/app/people/people.component.html","./src/app/people/people.component.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import {Component, Input, OnInit} from '@angular/core';\nimport {HttpService} from '../services/http.service';\nimport {PeopleService} from '../services/people.service';\n\nexport interface FilmProps {\n  title: string;\n}\n\n@Component({\n  selector: 'app-film',\n  templateUrl: './film.component.html',\n  styleUrls: ['./film.component.scss']\n})\nexport class FilmComponent implements OnInit {\n\n  @Input() url: string;\n\n  film: FilmProps = { title: 'loading...' };\n\n  constructor(\n    private httpService: HttpService,\n    private peopleService: PeopleService,\n    ) { }\n\n  ngOnInit(): void {\n    console.log('FilmComponent url :: ', this.url);\n    this.httpService.get(this.url).subscribe(\n      (response: FilmProps) => {\n        console.log('Film get response: ', response);\n        this.film = response;\n        this.peopleService.updateFilm(this.film);\n      },\n      (err: any) => {\n        console.log('Film get response: ', err);\n      },\n      () => {\n        console.log('Film get FINAL DONE: ');\n      });\n  }\n\n}\n","<span>{{film.title}}</span>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpService {\n\n  constructor(private http: HttpClient) {\n  }\n\n  get(url: string, opt: any = {}): Observable<any> {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    // return this.http.get(url.replace('http://', 'https://'), httpOptions);\n    return this.http.get(url, httpOptions);\n  }\n\n  post(url: string, data: any): Observable<any> {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      })\n    };\n    return this.http.post(url, data, httpOptions);\n  }\n}\n","import {Component, OnInit} from '@angular/core';\nimport {HttpService} from './services/http.service';\nimport {PeopleService} from './services/people.service';\nimport {PersonProps} from './person/person.component';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  title = 'star-wars-ng';\n\n  constructor(\n    private httpService: HttpService,\n    private peopleService: PeopleService,\n  ) {\n\n  }\n\n  ngOnInit(): void {\n    this.peopleService.asPersonObservable().subscribe(\n      (person: PersonProps) => this.title = person.name,\n      (error: any) => { },\n      () => {  },\n    );\n  }\n\n}\n","<div class=\"App\">\n  <h1>Person details {{title}}</h1>\n  <app-people></app-people>\n  <app-person></app-person>\n</div>\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport {HttpService} from './services/http.service';\nimport { PersonComponent } from './person/person.component';\nimport { PeopleComponent } from './people/people.component';\nimport { FilmComponent } from './film/film.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    PersonComponent,\n    PeopleComponent,\n    FilmComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule\n  ],\n  providers: [\n    HttpService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","<div class=\"person-details\">\n  <h3>Details Section</h3>\n  <div>Name: {{person.name}}</div>\n  <div>Birth year: {{person.birth_year}}</div>\n  <div>Gender: {{person.gender}}</div>\n  <div>List of films:</div>\n  <ul>\n    <li *ngFor=\"let film of person.films\">\n      <app-film [url]=\"film\"></app-film>\n    </li>\n  </ul>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport {PeopleService} from '../services/people.service';\n\nexport interface PersonProps {\n  name?: string;\n  height?: string;\n  mass?: string;\n  url?: string;\n  birth_year?: string;\n  gender?: string;\n  films: Array<string>;\n}\n\n@Component({\n  selector: 'app-person',\n  templateUrl: './person.component.html',\n  styleUrls: ['./person.component.scss']\n})\nexport class PersonComponent implements OnInit {\n\n  constructor(private peopleService: PeopleService) { }\n\n  person: PersonProps = { films: [] };\n\n  ngOnInit(): void {\n    this.peopleService.personSubject.subscribe(\n      (person: PersonProps) => {\n        console.log('Person component personSubject result ==== ', person);\n        this.person = person;\n        },\n      (error: any) => { console.log('Person component  personSubject error ==== ', error); },\n      () => { console.log('Person component personSubject complete ==== '); },\n      );\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {PeopleProps} from '../people/people.component';\nimport {HttpService} from '../services/http.service';\nimport {PersonProps} from '../person/person.component';\nimport {FilmProps} from '../film/film.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PeopleService {\n\n  peopleSubject: BehaviorSubject<PeopleProps> = new BehaviorSubject({ status: 'OK', count: 0, results: [] });\n\n  personSubject: BehaviorSubject<PersonProps> = new BehaviorSubject({ films: [] });\n\n  filmSubject: BehaviorSubject<FilmProps> = new BehaviorSubject({ title: '' });\n\n  constructor(private httpService: HttpService) {}\n\n  asObservable(): Observable<PeopleProps> {\n    return this.peopleSubject.asObservable();\n  }\n\n  asPersonObservable(): Observable<PersonProps> {\n    return this.personSubject.asObservable();\n  }\n\n  asFilmObservable(): Observable<FilmProps> {\n    return this.filmSubject.asObservable();\n  }\n\n  next(result: PeopleProps): void {\n    this.peopleSubject.next(result);\n  }\n\n  getPeople(url: string): any {\n    this.next({...this.peopleSubject.getValue(), ...{ status: 'loading' }});\n    this.httpService.get(url).subscribe(\n      (response: any) => {\n        console.log('People get response: ', response);\n        this.next({...response, ...{ status: 'OK' }});\n      },\n      (err: any) => {\n        console.log('People get response: ', err);\n      },\n      () => {\n        console.log('People get FINAL DONE: ');\n      });\n  }\n\n  updatePerson(person: PersonProps): void {\n    this.personSubject.next(person);\n  }\n\n  updateFilm(film: FilmProps): void {\n    this.filmSubject.next(film);\n  }\n}\n","<table class=\"people\">\n  <thead>\n  <tr>\n    <th>Name</th>\n    <th>Height</th>\n    <th>Mass</th>\n  </tr>\n  </thead>\n  <tbody>\n  <tr *ngFor=\"let person of people.results\" (click)=\"updatePerson(person)\">\n    <td>{{person.name}}</td>\n    <td>{{person.height}}</td>\n    <td>{{person.mass}}</td>\n    </tr>\n  </tbody>\n  <tfoot>\n  <tr>\n    <td colSpan=\"3\">\n      {{people.status}}\n      <a *ngIf=\"people.previous\" href=\"#\" (click)=\"prevPage()\">Prev</a> |\n      <a *ngIf=\"people.next\" href=\"#\" (click)=\"nextPage()\">Next</a>\n    </td>\n  </tr>\n  </tfoot>\n</table>\n","import {Component, OnInit, Output} from '@angular/core';\nimport {PeopleService} from '../services/people.service';\nimport {PersonProps} from '../person/person.component';\n\nexport interface PeopleProps {\n  status: string;\n  count: number;\n  next?: string;\n  previous?: string;\n  results: Array<PersonProps>;\n}\n\n@Component({\n  selector: 'app-people',\n  templateUrl: './people.component.html',\n  styleUrls: ['./people.component.scss']\n})\nexport class PeopleComponent implements OnInit {\n\n  @Output() people: PeopleProps = { status: '', count: 0, results: [] };\n\n  constructor(\n    private peopleService: PeopleService\n    ) {\n    this.peopleService.asObservable().subscribe(\n      (result: any) => {\n        console.log('People component peopleService result ==== ', result);\n        this.people = result;\n      },\n      (error: any) => { console.log('People component  peopleService error ==== ', error); },\n      () => { console.log('People component peopleService complete ==== '); },\n    );\n  }\n\n  ngOnInit(): void {\n    this.peopleService.getPeople('https://swapi.dev/api/people/');\n    // this.peopleService.getPeople('http://localhost:4200/api/people/');\n  }\n\n  updatePerson(person: PersonProps): void {\n    console.log('updatePerson clicked', person);\n    this.peopleService.updatePerson(person);\n  }\n\n  nextPage(): void {\n    console.log('Next page clicked');\n    this.peopleService.getPeople(this.people.next);\n  }\n\n  prevPage(): void {\n    console.log('Prev page clicked');\n    this.peopleService.getPeople(this.people.previous);\n  }\n\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}